}
rus_corrected <- rus
rus_corrected@polygons[[18]] <- chukotka
rus_corrected %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~reg_color, # раскрашиваем области
label = ~reg_label) %>% # добавляем подписи
addLegend(pal = pal, values = ~num, title = 'Попугаи') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
geojson_write(rus, file = 'russia_new.geojson')
data_old <- rus@data %>% select (name_latin, num, cartodb_id)
glimpse(data_old)
export(data_old, file = 'data_for_map.xlsx')
new_data <- import("data_for_map.xlsx")
glimpse(new_data)
pal <- colorNumeric('BuPu', NULL) # задаём палитру цветов
new_data2 <- mutate(new_data,
color_reg = pal(num),
title_reg = paste0(name_latin, ': ', formatC(num)))
new_data2[13,'color_reg'] <-"#e309ef"
rus@data <- new_data2
glimpse(new_data2)
rus %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~ color_reg, # раскрашиваем области
label = ~ title_reg) %>% # добавляем подписи
addLegend (pal = pal, values = ~num, title = 'кластеры') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
glimpse(rusmaps.dataframe)
plot(rus_fd)
info <- rus_fd@data
glimpse(info)
rus_nodata <- fortify(rus_fd, region = 'name')
glimpse(rus_nodata)
rus_final <- left_join(rus_nodata, info, by = c('id' = 'name'))
glimpse(rus_final)
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016', title = 'Население России')
base
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016', title = 'Население России')
base
base + coord_quickmap()
base + coord_quickmap() + theme(legend.position = 'none')
options (scipen=10000)
rus_final2 <- mutate(rus_final, pop_2016=pop_2016/1000000)
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016 (млн чел)', title = 'Население России')
base
rus_final <- left_join(rus_nodata, info, by = c('id' = 'name'))
rus_nodata <- fortify(rus_fd, region = 'name')
glimpse(rus_nodata)
rus_final <- left_join(rus_nodata, info, by = c('id' = 'name'))
rus_final2 <- mutate(rus_final, pop_2016=pop_2016/1000000)
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016 (млн чел)', title = 'Население России')
base <- ggplot(rus_final2) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016 (млн чел)', title = 'Население России')
base
library(tidyverse)
library(rio)
library(skimr)
library(DataExplorer)
library(lattice)
some <- import('data/manipulate.sav')
glimpse(some)
head(some)
tail(some)
cola <- import('data/cola.dta')
glimpse(cola)
head(cola)
tail(cola)
library(hexView) # подключаем специальный пакет для чтения данных eviews
housing <- readEViews('data/housing.wf1')
glimpse(housing)
df <- diamonds
```{r}
skim(df)
qplot(data = df, x = carat)
?qplot
qplot(data = df, x = carat) +
labs(x = 'Вес', y = 'Количество', title = 'Распределение бриллиантов по весу')
qplot(data = df, x = cut)  +
labs(x = 'Качество огранка', y = 'Количество', title = 'Распределение бриллиантов по огранке')
qplot(data = df, x = carat, y = price)
library(lattice) # загружаем пакет
head(df)
splom(df[1:1000, c(1, 5, 6)]) # строим диаграммы рассеяния для 1000 наблюдений
qplot(data = df, x = price) +
labs(x = 'price', y = 'количество', title = 'Гистограмма цен на бриллианты')
qplot(data = df, x = depth, y = price) +
labs(x = 'depth', y = 'price', title = 'график рассеяния параметров бриллиантов')
library(DataExplorer)
create_report(diamonds)
diamonds2 <- filter(diamonds, price > mean(price), carat < mean(carat))
skim(diamonds2)
data_cp2 <- read_csv('rus_cp1251.csv', locale = locale(encoding = 'CP1251'))
# Chunk 1
library(tidyverse)
library(rio)
library(skimr)
# Chunk 2
library(lattice)
library(DataExplorer)
# Chunk 3
some <- import('data/manipulate.sav')
glimpse(some)
head(some)
tail(some)
# Chunk 4
cola <- import('data/cola.dta')
glimpse(cola)
head(cola)
tail(cola)
# Chunk 5
library(hexView) # подключаем специальный пакет для чтения данных eviews
housing <- readEViews('data/housing.wf1')
glimpse(housing)
# Chunk 6
df <- diamonds
# Chunk 7
skim(df)
# Chunk 8
qplot(data = df, x = carat)
# Chunk 9
qplot(data = df, x = carat) +
labs(x = 'Вес', y = 'Количество', title = 'Распределение бриллиантов по весу')
# Chunk 10
qplot(data = df, x = cut)  +
labs(x = 'Качество огранка', y = 'Количество', title = 'Распределение бриллиантов по огранке')
# Chunk 11
qplot(data = df, x = carat, y = price)
# Chunk 12
library(lattice) # загружаем пакет
head(df)
splom(df[1:1000, c(1, 5, 6)]) # строим диаграммы рассеяния для 1000 наблюдений
# Chunk 13
qplot(data = df, x = price) +
labs(x = 'price', y = 'количество', title = 'Гистограмма цен на бриллианты')
# Chunk 14
qplot(data = df, x = depth, y = price) +
labs(x = 'depth', y = 'price', title = 'график рассеяния параметров бриллиантов')
# Chunk 15
library(DataExplorer)
create_report(diamonds)
# Chunk 16
diamonds2 <- filter(diamonds, price > mean(price), carat < mean(carat))
skim(diamonds2)
# Chunk 17
diamonds3 <- filter(df, x>5)
skim(diamonds3)
# Chunk 18
diamonds4 <- mutate(diamonds, lprice = log(price))
skim(diamonds4)
# Chunk 19
diamonds5 <- mutate(diamonds, carat_price = price/carat)
skim(diamonds5)
# Chunk 20
diamonds6 <- arrange(diamonds, price) %>% head(3)
diamonds6
# Chunk 21
diamonds7 <- arrange(df, carat) %>% tail(5)
diamonds7
data_utf <- import('rus_utf8.csv')
data_utf <- import('data/rus_utf8.csv')
glimpse(data_utf)
data_cp <- import('data/rus_cp1251.csv')
glimpse(data_cp)
glimpse(data_cp2)
glimpse(data_cp2)
data_cp2 <- read_csv('data/rus_cp1251.csv', locale = locale(encoding = 'CP1251'))
glimpse(data_cp2)
data_utf2 <- read_csv('data/rus_utf8.csv', locale = locale(encoding = 'UTF8'))
glimpse(data_utf2)
export(diamonds, 'diamonds.csv')
export(diamonds, 'diamonds.xlsx')
```{r, eval=FALSE}
?filter
```{r, eval=FALSE}
vignette(package = 'skimr')
vignette('Using_skimr')
library('tidyverse','rio', 'skimr')
library(tidyverse)
library(rio)
library(skimr)
df <- import ('cereal.csv')
setwd("C:/Users/Sony/AppData/Local/Temp/Rar$DIa0.532")
df <- import ('cereal.csv')
getwd(cereal.csv)
getwd('cereal.csv')
getwd(hw_010.rmd)
glimpse('cereal.csv')
df <- import('cereal.csv')
df <- import(data/'cereal.csv')
df <- import('data/cereal.csv')
setwd("C:/Users/Sony/AppData/Local/Temp/Rar$DIa0.532")
library(tidyverse)
library(rio)
library(skimr)
setwd("D:/R_teaching/r_course")
df <- import(cereal.csv)
df <- import(data/cereal.csv)
df <- import('data/cereal.csv')
glimpse(df)
head(df)
tail(df)
skim(df)
qplot(data = df, x = calories) +
labs(x= "калории", title= "Гистограмма калорий")
qplot(data = df, x = mfr) +
labs(x= "производители", title= "Гистограмма производителей")
qplot(data = df, x = calories) +
labs(x= "калории", y = 'количесвто', title= "Гистограмма калорий")
qplot(data = df, x = carbo, y = fiber) +
labs(x = "углеводы", y = "клетчатка", title = "Углеводы и клетчатка в хлопьях")
df_sub <- filter(df, sugars>10, protein<mean(protein))
skim(df_sub)
df <- mutate(df, weight_g = weight * 28)
head(df)
skim(df)
sorted <- arrange(df, rating)
skim(sorted)
head(sorted)
tail(sorted)
sorted
export(sorted, 'cereal_sorted.xlsx')
library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые ???? графики для качественных переменных
library(nycflights13) # набор данных о вылетах из Нью-Йорка
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
table(diamonds$color)
levels(diamonds$color)
levels(diamonds$color)
skim(diamonds)
library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые ???? графики для качественных переменных
library(nycflights13) # набор данных о вылетах из Нью-Йорка
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
table(diamonds$color)
skim(diamonds)
levels(diamonds$color)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
?fct_collapse
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, Best = c('Premium', "Ideal")))
table(diamonds3$cut)
adult <- import('adult.rds') # загружаем данные
glimpse(adult)
adult2 <- select(adult, sector = V2, race = V10, wage = V15)
glimpse(adult2)
skim(adult2)
table(adult2$sector, adult2$wage)
adult3 <- mutate(adult2, sector = fct_collapse(sector, Gov = c('State-gov', 'Federal-gov', 'Local-gov')))
adult4 <- mutate(adult3, sector = fct_collapse(sector, Self_emp = c('Self-emp-not-inc', 'Self-emp-inc')))
skim(adult4)
ctable <- table(adult4$sector, adult4$wage, dnn = c('Сектор', 'Зарплата'))
ctable
?dnn
??dnn
?table
mosaic(ctable, shade = TRUE, legend = TRUE)
chisq.test(ctable)
dta <- Arthritis
glimpse(Arthritis)
skim(Arthritis)
new_ctable <- table(Arthritis$Treatment, Arthritis$Imrroved, dnn = c('Лечение', 'Улучшение'))
new_ctable <- table(Arthritis$Treatment, Arthritis$Imrroved, dnn = c('Лечение', 'Улучшение'))
new_ctable
new_ctable <- table(dta$Treatment, dta$Improved, dnn = c('Лечение', 'Улучшение'))
new_ctable
mosaic(new_ctable, shade = TRUE, legend = TRUE)
new_ctable %>% chisq.test(new_ctable) # применяем к таблице тест на независимость
freq_table <- group_by(adult4, wage, race, sector) %>% summarise(freq = n())
freq_table
mosaic(data = Arthritis, ~ Sex + Treatment + Improved, shade = TRUE, legend = TRUE)
?mtcars
glimpse(mtcars)
?mosaic
cars_cor <- cor(mtcars)
cars_cor
corrplot(cars_cor) # график с аргументами по умолчанию
corrplot(cars_cor, method = 'number') # график со значениями корреляции
corrplot(cars_cor, method = 'color', type = 'upper') # только правая верхняя часть
corrplot.mixed(cars_cor) # можно миксовать!
?corrplot
corrplot(cars_cor, method = 'ellipse', type = 'lower') # только правая верхняя часть
corrplot.mixed(cars_cor) # можно миксовать!
corrplot(cars_cor, method = 'ellipse', type = 'lower') # только левая нижняя часть
corrplot(cars_cor, method = 'pie', type = 'lower') # только левая нижняя часть
corrplot(cars_cor, method = 'shade', type = 'lower') # только левая нижняя часть
corrplot(cars_cor, method = 'shade', type ='lower') # только левая нижняя часть
corrplot(cars_cor, method = 'color', type = 'upper') # только правая верхняя часть
corrplot(cars_cor, method = 'shade', type ='lower') # только левая нижняя часть
corrplot(cars_cor, method = 'number') # график со значениями корреляции
corrplot(cars_cor) # график с аргументами по умолчанию
corrplot.mixed(cars_cor) # можно миксовать!
skim(airquality)
cmatrix <- cor(airquality, use = 'pairwise.complete.obs') # игнорируем пропущенные значения
cmatrix
corrplot(cmatrix, method = 'ellipse', type = 'lower')
c
report <- group_by(diamonds, color) %>%
summarise(min_price = min(price), max_price = max(price))
report
report2 <- group_by(diamonds, `cut`) %>%
summarise(med_price = median(price), sd_price = sd(price), n_obs = n()) %>%
top_n(3, min(med_price))
report2
report2 <- group_by(diamonds, `cut`) %>%
summarise(med_price = median(price), sd_price = sd(price), n_obs = n()) %>%
top_n(3, med_price)
report2
?top_n
report3 <- group_by(diamonds, clarity) %>%
summarise(med_price = median(price), med_carat = median(carat), n_obs = n()) %>%
arrange(med_carat)
report3
?arrange
report3 <- group_by(diamonds, clarity) %>%
summarise(med_price = mean(price), med_carat = median(carat), n_obs = n()) %>%
arrange(med_carat)
report3
report3 <- group_by(diamonds, clarity) %>%
summarise(mean_price = mean(price), med_carat = median(carat), n_obs = n()) %>%
arrange(med_carat)
report3
ggplot(data = diamonds) +
geom_point(aes(x = carat, y = price)) +
labs(x = 'Масса в каратах', y = 'Цена в долларах', title = 'Бриллианты. Много :)')
ggplot(data = diamonds) +
geom_point(aes(x = carat, y = price, color = color)) +
labs(x = 'Масса в каратах', y = 'Цена в долларах', title = 'Бриллианты. Много :)')
ggplot(data = diamonds) +
geom_point(aes(x = carat, y = price, color = color)) +
geom_vline(aes(xintercept = mean(carat))) +
labs(x = 'Масса в каратах', y = 'Цена в долларах', title = 'Бриллианты. Много :)')
ggplot(data = mtcars) +
geom_point(aes(x = mpg, y = disp, shape = am)) +
labs(x = 'Пробег в милях на галлон', y = 'Объём двигателя')
skim(mtcars)
factor(am)
am<-factor(am)
ggplot(data = mtcars) +
geom_point(aes(x = mpg, y = disp, shape = am)) +
labs(x = 'Пробег в милях на галлон', y = 'Объём двигателя')
mtcars<-mutate(mtcars,am<-factor(am))
ggplot(data = mtcars) +
geom_point(aes(x = mpg, y = disp, shape = am)) +
labs(x = 'Пробег в милях на галлон', y = 'Объём двигателя')
mtcars<-mutate(mtcars,am = factor(am))
ggplot(data = mtcars) +
geom_point(aes(x = mpg, y = disp, shape = am)) +
labs(x = 'Пробег в милях на галлон', y = 'Объём двигателя')
ggplot(data = mtcars) +
geom_point(aes(x = mpg, y = disp, shape = am)) +
geom_hline(aes(yintercept = median(disp)))
ggplot(data = mtcars) +
geom_histogram(aes(x = mpg)) +
labs(x = 'Пробег в милях на галлон', title = 'Няшный график :)')
mtcars2 <- mutate(mtcars, cyl = factor(cyl))
skim(mtcars2)
ggplot(data = mtcars2) +
geom_violin(aes(x = cyl, y = mpg)) +
labs(x = 'Цилиндры', y = 'Мощность', title = 'Машины')
ggplot(data = mtcars2) +
geom_violin(aes(x = cyl, y = mpg)) +
facet_grid(am ~ .) +
labs(x = 'Цилиндры', y = 'Мощность', title = 'Машины')
ggplot(data = mtcars2) +
geom_violin(aes(x = cyl, y = mpg)) +
facet_grid(. ~ am) +
labs(x = 'Цилиндры', y = 'Мощность', title = 'Машины')
ggplot(data = mtcars2) +
geom_violin(aes(x = cyl, y = mpg)) +
facet_grid(am) +
labs(x = 'Цилиндры', y = 'Мощность', title = 'Машины')
ggplot(data = mtcars2) +
geom_violin(aes(x = cyl, y = mpg)) +
facet_grid(.~ am) +
labs(x = 'Цилиндры', y = 'Мощность', title = 'Машины')
labs(x = 'Цилиндры', title = 'Машины')
?geom_violin
geom_violin(aes(x = cyl) +
freq_table
ggplot(data = freq_table,
aes(weight = freq, axis1 = sector, axis2 = wage)) +
geom_alluvium(aes(fill = race), width = 1/12) +
geom_stratum(width = 1/8) +
geom_label(stat = "stratum", label.strata = TRUE)
ggplot(data = freq_table,
aes(weight = freq, axis1 = sector, axis2 = wage, axis3 = race)) +
geom_alluvium(aes(fill = race), width = 1/12) +
geom_stratum(width = 1/8) +
geom_label(stat = "stratum", label.strata = TRUE)
ggplot(data = freq_table,
aes(weight = freq, axis1 = sector, axis2 = wage)) +
geom_alluvium(aes(fill = race), width = 1/12) +
geom_stratum(width = 1/8) +
geom_label(stat = "stratum", label.strata = TRUE)
ggplot(data = freq_table,
aes(weight = freq, axis1 = sector, axis2 = wage)) +
geom_alluvium(aes(fill = race), width = 1/12) +
geom_label(stat = "stratum", label.strata = TRUE)
ggplot(data = freq_table,
aes(weight = freq, axis1 = sector, axis2 = wage)) +
geom_stratum(width = 1/8) + geom_label(stat = "stratum", label.strata = TRUE)
ggplot(data = freq_table,
aes(weight = freq, axis1 = sector, axis2 = wage)) +
geom_alluvium(aes(fill = race), width = 1/12) +
geom_stratum(width = 1/8) + geom_label(stat = "stratum", label.strata = TRUE)
mx <- tibble(ID = c('A', 'B', 'C', 'D', 'E'),
x = c(1, 2, 4, 1, 8))
mx
my <- tibble(ID = c('A', 'C', 'D', 'F', 'E'),
y = c(13,12,14,1,5,6))
my <- tibble(ID = c('A', 'C', 'D', 'F', 'E'),
y = c(13,12,14,1,5))
my
left_join(mx, my, by = 'ID')
right_join(mx, my, by = 'ID')
inner_join(mx, my, by = 'ID')
full_join(mx, my, by = 'ID')
glimpse(flights)
skim(flights)
glimpse(weather)
skim(weather)
left <- left_join(flights, weather, by = c('year', 'month', 'day', 'hour', 'origin'))
glimpse(left)
inner <- inner_join(flights, weather, by = c('year', 'month', 'day', 'hour', 'origin'))
glimpse(inner)
gdp <- import('gdp.xls')
glimpse(gdp)
gdp <- rename(gdp, indicator = X__1)
long_gdp <- melt(gdp, id = 'indicator', variable.name = 'year')
head(long_gdp, 30) # первые 30 наблюдений
air_long <- melt(airquality, id = c('Month', 'Day')) # id оставлеет указанные столбцы
air_long
air_wide <- dcast(air_long, Day + Month ~ Data) # вместо пропуска должна быть переменная с несколькими значениями
dcast(diamonds, cut ~ color, value.var = "price", fun.aggregate = mean)
air_wide <- dcast(air_long, Day + Month ~ variable) # вместо пропуска должна быть переменная с несколькими значениями
air_wide
```{r, message=FALSE, warning=FALSE}
library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые диаграммы для качественных переменных
library(titanic) # набор данных о пассажирах Титаника
install.packages("titanic")
library(titanic) # набор данных о пассажирах Титаника
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
df <- import('titanic.csv')
skim(df)
table(df$Embarked)
df2 <- mutate(df, Embarked = fct_collapse(Embarked, GB = c('Q', 'S')))
table(df2)
df2 <- mutate(df, Embarked = fct_collapse(Embarked, GB = c('Q', 'C')))
table(df2)
table(df2$Embarked)
ctable <- df(Pclass, Survived)
chisq.test(сефиду)
chisq.test(ctable)
ctable <- table(df$Pclass, df$Survived)
chisq.test(ctable)
library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые ???? графики для качественных переменных
library(nycflights13) # набор данных о вылетах из Нью-Йорка
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
inner_join(ilo_data, by = c('country', 'year))
ilo_data <- ilo_hourly_compensation %>%
ilo_data <- ilo_hourly_compensation %>%
inner_join (ilo_data, ilo_working_hours by = c('country', 'year))
left_join(mx, my, by = 'ID')
right_join(mx, my, by = 'ID')
inner_join(mx, my, by = 'ID')
full_join(mx, my, by = 'ID')
count (mx)
?count
count (mx)
?count
?loading_data
count(diamonds2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_5807/datasets/ilo_data.RData"))
ilo_data
?fig_alain
?toc
