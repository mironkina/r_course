library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые ???? графики для качественных переменных
library(nycflights13) # набор данных о вылетах из Нью-Йорка
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
install.packages("feather")
library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые ???? графики для качественных переменных
library(nycflights13) # набор данных о вылетах из Нью-Йорка
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
table(diamonds$color)
levels(diamonds$color)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds, cut = fct_collapse(`Premium`, `Ideal`))
table(diamonds3$cut)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds, cut = fct_collapse(cut, best=c(`Premium`, `Ideal`)))
table(diamonds3$cut)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, best=c(`Premium`,`Ideal`)))
table(diamonds3$cut)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, best=c(`Premium`,`Ideal`)))
table(diamonds3$cut)
table(diamonds$color)
levels(diamonds$color)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, Best=c(`Premium`,`Ideal`)))
table(diamonds3$cut)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, Best=c('Premium', "Ideal")))
table(diamonds3$cut)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, Best = c('Premium', "Ideal")))
table(diamonds3$cut)
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("MASS")
install.packages("car")
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("rlang")
install.packages("data.table")
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages(c("stringi", "openxlsx"))
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("mvtnorm")
g1 <- fviz_nbclust(protein_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
g2 <- fviz_nbclust(protein_no_country, kmeans, method = 'silhouette') +
labs(subtitle = 'Silhouette method')
g2
g3 <- fviz_nbclust(protein_no_country, kmeans, method = 'gap_stat') +
labs(subtitle = 'Gap statistic method')
g3
(g1 + g2) / g3
g1 + g2 + g3
g1 + (g2 / g3)
# p1 <- fviz_nbclust(___, kmeans, method = 'wss') +
#  labs(subtitle = 'Elbow method')
# p2 <- fviz_nbclust(___, ___, method = 'silhouette') +
#  labs(subtitle = 'Silhouette method')
# p3 <- fviz_nbclust(___, ___, method = 'gap_stat') +
#  labs(subtitle = 'Gap statistic method')
# (___ + ___) / ___
# p1 <- fviz_nbclust(___, kmeans, method = 'wss') +
#  labs(subtitle = 'Elbow method')
# p2 <- fviz_nbclust(___, ___, method = 'silhouette') +
#  labs(subtitle = 'Silhouette method')
# p3 <- fviz_nbclust(___, ___, method = 'gap_stat') +
#  labs(subtitle = 'Gap statistic method')
# (___ + ___) / ___
g1 <- fviz_nbclust(protein_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
devtools::install_github('thomasp85/patchwork')
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(nycflights13) # baby - большие данные
b <- 11:15
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 3
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ISLR) # ещё данные
library(caret) # пакет для подбора параметров разных моделей
library(elasticnet) # LASSO
library(latex2exp) # формулы в подписях к графику
library(rusmaps) # подборка карт России
library(geojsonio) # чтение карт в формате geojson
library(leaflet) # рисование динамических карт в html
library(maptools) # утилиты для работы с картами
library(rgeos) # пересчёт картографических проекций
library(plm) # анализ панельных данных
library(texreg) # таблички со сравнением моделей
# Chunk 4
educ <- import('data/xAPI-Edu-Data.csv')
skim(educ)
# Chunk 5
educ_logit <- mutate(educ, y = fct_collapse(Class, H = c('M', 'H'))) %>%
select(-Class)
educ_fct <- mutate_if(educ_logit, is.character, factor)
# Chunk 6
set.seed(777)
train_rows <- createDataPartition(educ_fct$y, p = 0.8, list = FALSE)
educ_train <- educ_fct[train_rows, ]
educ_test <- educ_fct[-train_rows, ]
# Chunk 7
trctrl <- trainControl(method = 'cv', number = 5)
set.seed(777)
educ_knn_fit <- train(y ~ ., data = educ_train, method = 'knn',
trControl = trctrl,
preProcess = c('center', 'scale'))
educ_knn_fit
# Chunk 8
plot(educ_knn_fit, xlab = 'Число соседей',
ylab = 'Доля правильных ответов',
main = 'Метод k ближаших соседей')
# Chunk 9
def <- Default
skim(def)
# Chunk 10
set.seed(777)
train_rows <- createDataPartition(def$default, p = 0.7, list = FALSE)
def_train <- def[train_rows, ]
def_test <- def[-train_rows, ]
# Chunk 11
# def_knn_fit <- train(___ ~ ., data = ___, method = '___',
#                      trControl = trctrl,
#                      preProcess = c('___', '___'))
# plot(___, xlab = 'Число соседей',
#      ylab = 'Доля правильных ответов',
#      main = 'Метод k ближаших соседей')
# Chunk 12
educ_knn_predict <- predict(educ_knn_fit, newdata = educ_test)
confusionMatrix(educ_knn_predict, educ_test$y)
# Chunk 13
# def_knn_pred <- predict(___, newdata = ___)
# confusionMatrix(___, ___$default)
# Chunk 14
the_grid <- expand.grid(.fraction = c(0.1, 0.2, 0.3, 0.5, 0.7))
the_control <- trainControl(method = 'cv', number = 5)
educ_lasso_fit <- train(raisedhands ~ ., data = educ_train,
method = 'lasso', trControl = the_control,
tuneGrid = the_grid)
educ_lasso_fit
# Chunk 15
plot(educ_lasso_fit,
xlab = TeX('Доля $R^2$ от МНК'), ylab = 'RMSE',
main = 'LASSO регрессия')
# Chunk 16
# educ_lasso_pred <- predict(___, newdata = ___)
# Chunk 17
rus <- geojson_read('data/russia.geojson', what = 'sp')
class(rus)
glimpse(rus@data)
# Chunk 18
set.seed(777)
rus@data <- mutate(rus@data,
num = rnorm(n = 83, mean = 100, sd = 30))
glimpse(rus@data)
# Chunk 19
pal <- colorNumeric('BuPu', NULL) # задаём палитру цветов (BuPu - это розовая палитра)
rus@data <- mutate(rus@data,
reg_color = pal(num),
reg_label = paste0(name_latin, ': ', formatC(num), ' попугаев'))
glimpse(rus@data)
# Chunk 20
rus %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~reg_color, # раскрашиваем области
label = ~reg_label) %>% # добавляем подписи
addLegend(pal = pal, values = ~num, title = 'Попугаи') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
# Chunk 21
chukotka <- rus@polygons[[18]]
for (i in 1:length(chukotka@Polygons)) {
polygon_long <- chukotka@Polygons[[i]]@coords[, 1]
if (mean(polygon_long) < 0) {
polygon_long <- 360 + polygon_long
}
chukotka@Polygons[[i]]@coords[, 1] <- polygon_long
}
rus_corrected <- rus
rus_corrected@polygons[[18]] <- chukotka
# Chunk 22
rus_corrected %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~reg_color, # раскрашиваем области
label = ~reg_label) %>% # добавляем подписи
addLegend(pal = pal, values = ~num, title = 'Попугаи') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
# Chunk 23
geojson_write(rus, file = 'russia_new.geojson')
# Chunk 24
data_old <- rus@data %>% select (name_latin, num, cartodb_id)
glimpse(data_old)
# Chunk 25
export(data_old, file = 'data_for_map.xlsx')
# Chunk 26
new_data <- import("data_for_map.xlsx")
glimpse(new_data)
# Chunk 27
pal <- colorNumeric('BuPu', NULL) # задаём палитру цветов
new_data2 <- mutate(new_data,
color_reg = pal(num),
title_reg = paste0(name_latin, ': ', formatC(num)))
new_data2[13,'color_reg'] <-"#e309ef"
# Chunk 28
rus@data <- new_data2
glimpse(new_data2)
setwd("D:/R_teaching/r_course")
educ <- import('data/xAPI-Edu-Data.csv')
skim(educ)
rus <- geojson_read('data/russia.geojson', what = 'sp')
class(rus)
glimpse(rus@data)
set.seed(777)
rus@data <- mutate(rus@data,
num = rnorm(n = 83, mean = 100, sd = 30))
glimpse(rus@data)
pal <- colorNumeric('BuPu', NULL) # задаём палитру цветов (BuPu - это розовая палитра)
rus@data <- mutate(rus@data,
reg_color = pal(num),
reg_label = paste0(name_latin, ': ', formatC(num), ' попугаев'))
glimpse(rus@data)
pal <- colorNumeric('BuPu', NULL) # задаём палитру цветов (BuPu - это розовая палитра)
rus@data <- mutate(rus@data,
reg_color = pal(num),
reg_label = paste0(name_latin, ': ', formatC(num), ' попугаев'))
glimpse(rus@data)
rus %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~reg_color, # раскрашиваем области
label = ~reg_label) %>% # добавляем подписи
addLegend(pal = pal, values = ~num, title = 'Попугаи') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
chukotka <- rus@polygons[[18]]
for (i in 1:length(chukotka@Polygons)) {
polygon_long <- chukotka@Polygons[[i]]@coords[, 1]
if (mean(polygon_long) < 0) {
polygon_long <- 360 + polygon_long
}
chukotka@Polygons[[i]]@coords[, 1] <- polygon_long
}
rus_corrected <- rus
rus_corrected@polygons[[18]] <- chukotka
rus_corrected %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~reg_color, # раскрашиваем области
label = ~reg_label) %>% # добавляем подписи
addLegend(pal = pal, values = ~num, title = 'Попугаи') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
geojson_write(rus, file = 'russia_new.geojson')
data_old <- rus@data %>% select (name_latin, num, cartodb_id)
glimpse(data_old)
export(data_old, file = 'data_for_map.xlsx')
new_data <- import("data_for_map.xlsx")
glimpse(new_data)
pal <- colorNumeric('BuPu', NULL) # задаём палитру цветов
new_data2 <- mutate(new_data,
color_reg = pal(num),
title_reg = paste0(name_latin, ': ', formatC(num)))
new_data2[13,'color_reg'] <-"#e309ef"
rus@data <- new_data2
glimpse(new_data2)
rus %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~ color_reg, # раскрашиваем области
label = ~ title_reg) %>% # добавляем подписи
addLegend (pal = pal, values = ~num, title = 'кластеры') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
glimpse(rusmaps.dataframe)
plot(rus_fd)
info <- rus_fd@data
glimpse(info)
rus_nodata <- fortify(rus_fd, region = 'name')
glimpse(rus_nodata)
rus_final <- left_join(rus_nodata, info, by = c('id' = 'name'))
glimpse(rus_final)
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016', title = 'Население России')
base
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016', title = 'Население России')
base
base + coord_quickmap()
base + coord_quickmap() + theme(legend.position = 'none')
options (scipen=10000)
rus_final2 <- mutate(rus_final, pop_2016=pop_2016/1000000)
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016 (млн чел)', title = 'Население России')
base
rus_final <- left_join(rus_nodata, info, by = c('id' = 'name'))
rus_nodata <- fortify(rus_fd, region = 'name')
glimpse(rus_nodata)
rus_final <- left_join(rus_nodata, info, by = c('id' = 'name'))
rus_final2 <- mutate(rus_final, pop_2016=pop_2016/1000000)
base <- ggplot(rus_final) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016 (млн чел)', title = 'Население России')
base <- ggplot(rus_final2) +
geom_polygon(aes(x = long, y = lat,
fill = pop_2016, group = group), color = 'white') +
labs(x = '', y = '', fill = 'Население 2016 (млн чел)', title = 'Население России')
base
