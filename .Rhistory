library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые ???? графики для качественных переменных
library(nycflights13) # набор данных о вылетах из Нью-Йорка
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
install.packages("feather")
library(tidyverse) # обработка данных, графики...
library(vcd) # мозаичные графики для качественных переменных
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(ggalluvial) # потоковые ???? графики для качественных переменных
library(nycflights13) # набор данных о вылетах из Нью-Йорка
library(corrplot) # визуализация корреляций
library(reshape2) # длинные и широкие таблицы
table(diamonds$color)
levels(diamonds$color)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds, cut = fct_collapse(`Premium`, `Ideal`))
table(diamonds3$cut)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds, cut = fct_collapse(cut, best=c(`Premium`, `Ideal`)))
table(diamonds3$cut)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, best=c(`Premium`,`Ideal`)))
table(diamonds3$cut)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, best=c(`Premium`,`Ideal`)))
table(diamonds3$cut)
table(diamonds$color)
levels(diamonds$color)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, Best=c(`Premium`,`Ideal`)))
table(diamonds3$cut)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, Best=c('Premium', "Ideal")))
table(diamonds3$cut)
diamonds2 <- mutate(diamonds, color = fct_collapse(color, United = c('D', 'E', 'F')))
table(diamonds2$color)
diamonds3 <- mutate(diamonds,
cut = fct_collapse(cut, Best = c('Premium', "Ideal")))
table(diamonds3$cut)
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("MASS")
install.packages("car")
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("rlang")
install.packages("data.table")
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages(c("stringi", "openxlsx"))
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("mvtnorm")
g1 <- fviz_nbclust(protein_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
g2 <- fviz_nbclust(protein_no_country, kmeans, method = 'silhouette') +
labs(subtitle = 'Silhouette method')
g2
g3 <- fviz_nbclust(protein_no_country, kmeans, method = 'gap_stat') +
labs(subtitle = 'Gap statistic method')
g3
(g1 + g2) / g3
g1 + g2 + g3
g1 + (g2 / g3)
# p1 <- fviz_nbclust(___, kmeans, method = 'wss') +
#  labs(subtitle = 'Elbow method')
# p2 <- fviz_nbclust(___, ___, method = 'silhouette') +
#  labs(subtitle = 'Silhouette method')
# p3 <- fviz_nbclust(___, ___, method = 'gap_stat') +
#  labs(subtitle = 'Gap statistic method')
# (___ + ___) / ___
# p1 <- fviz_nbclust(___, kmeans, method = 'wss') +
#  labs(subtitle = 'Elbow method')
# p2 <- fviz_nbclust(___, ___, method = 'silhouette') +
#  labs(subtitle = 'Silhouette method')
# p3 <- fviz_nbclust(___, ___, method = 'gap_stat') +
#  labs(subtitle = 'Gap statistic method')
# (___ + ___) / ___
g1 <- fviz_nbclust(protein_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
devtools::install_github('thomasp85/patchwork')
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(nycflights13) # baby - большие данные
b <- 11:15
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(Ecdat) # много-много разных наборов данных
library(huxtable) # красивые таблички в html, tex
library(stargazer) # красивые таблички в html, tex
library(texreg) # и снова красивые таблички в html, tex :)
library(estimatr) # модели с робастными ошибками
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(Ecdat) # много-много разных наборов данных
library(huxtable) # красивые таблички в html, tex
install.packages(c("huxtable", "stargazer", "texreg", "estimatr"))
pulse <- import('data/pulse.txt')
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
setwd("D:/R_teaching/r_course")
pulse <- import('data/pulse.txt')
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
model_r <- lm(data = pulse_fct, Pulse2 ~ Pulse1)
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur)
? lm_robust
?lm_robust
?lm_robust
library(huxtable) # красивые таблички в html, tex
library(stargazer) # красивые таблички в html, tex
library(texreg) # и снова красивые таблички в html, tex :)
library(estimatr) # модели с робастными ошибками
model_r_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Pulse1)
model_ur_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur_rob)
model_ur_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes, se_type = "HC1")
summary(model_ur_rob)
model_r_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Pulse1)
model_ur_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes, se_type = "HC1")
summary(model_ur_rob)
coeftest(model_ur_rob)
coefci(model_ur_rob)
coefci(model_ur_rob, level = 0.9)
plot(model_ur_rob)
plot(model_ur)
View(model_ur)
View(model_ur)
View(model_ur)
View(model_ur)
View(model_ur)
View(model_ur_rob)
View(model_ur)
model_ur[["fitted.values"]]
waldtest(model_r_rob, model_ur_rob)
coeftest(model_ur, vcov. = vcovHC)
coefci(model_ur, vcov. = vcovHC)
bptest(Pulse2~Pulse1=smoke, varformula = ~ Smokes, data = pulse_fct)
bptest(Pulse2 ~ Pulse1 + smoke, varformula = ~ Smokes, data = pulse_fct)
bptest(Pulse2 ~ Pulse1 + Smokes, varformula = ~ Smokes, data = pulse_fct)
glimpse(Mroz)
labor <- filter(Mroz, wagew > 0)
model_lm <- lm(data = labor, log(wagew) ~ educw + experience + I(experience^2))
summary(model_lm)
model_iv <- ivreg(data = labor,
log(wagew) ~ educw + experience + I(experience^2) |
experience + I(experience^2) + educwm + educwf)
summary(model_iv, diagnostics = TRUE)
model_iv_robust <- iv_robust(data = labor,
log(wagew) ~ educw + experience + I(experience^2) |
experience + I(experience^2) + educwm + educwf)
summary(model_iv_robust)
