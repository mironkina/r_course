library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
install.packages(c("feather", "factoextra", "dendextend", "naniar", "visdat", "patchwork"))
install.packages("devtools")
devtools::install_github('thomasp85/patchwork')
b
a <- c(5, 6, 7, NA, 8)
b <- 11:15
b
cars
a
max(b)
max(a)
max(a, na.rm = TRUE)
mx <- tibble(ID = c('A', 'B', 'C', 'D', 'E'),
x = c(1, 2, 4, 1, 8))
mx
my_matrix <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
my_matrix
my_matrix <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
my_matrix
skim(my_matrix) # не работает :(
my_tibble <- as_tibble(my_matrix)
skim(my_tibble)
my_list <- list(kreks = 'Привет!', peks = c(5, 6, NA), feks = diamonds)
my_list$kreks
my_list$peks
attributes(my_list)
my
<- tibble(ID = c('A', 'C', 'D', 'F', 'E'),
y = c(___))
my
<- tibble(ID = c('A', 'C', 'D', 'F', 'E'),
y = c(1, 12, 13, 3, 5, 7))
my
<- tibble(ID = c('A', 'C', 'D', 'F', 'E'),
y = c(1, 12, 13, 3, 5))
my
my_list <- list(kreks = 'Привет!', peks = c(5, 6, NA), feks = diamonds)
my_list$kreks
my_list$peks
attributes(my_list)
my_list <- list(kreks = 'Привет!', peks = c(5, 6, NA), feks = diamonds)
library(tidyverse) # обработка данных, графики...
my_list <- list(kreks = 'Привет!', peks = c(5, 6, NA), feks = diamonds)
diamonds
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
my_list <- list(kreks = 'Привет!', peks = c(5, 6, NA), feks = diamonds)
ggplot2::diamonds
install.packages("tidyverse")
library(tidyverse) # обработка данных, графики...
my_list <- list(kreks = 'Привет!', peks = c(5, 6, NA), feks = diamonds)
my_list$kreks
attributes(my_list)
my_list$peks
<- tibble(ID = c('A', 'C', 'D', 'F', 'E'),
y = c(1, 12, 13, 3, 5))
my <- tibble(ID = c('A', 'C', 'D', 'F', 'E'),
y = c(1, 12, 13, 3, 5))
left_join(mx, my, by = 'ID')
# right_join(mx, my, by = 'ID')
# inner_join(mx, my, by = 'ID')
# full_join(mx, my, by = 'ID')
left_join(mx, my, by = 'ID')
right_join(mx, my, by = 'ID')
# inner_join(mx, my, by = 'ID')
# full_join(mx, my, by = 'ID')
left_join(mx, my, by = 'ID')
right_join(mx, my, by = 'ID')
inner_join(mx, my, by = 'ID')
# full_join(mx, my, by = 'ID')
left_join(mx, my, by = 'ID')
right_join(mx, my, by = 'ID')
inner_join(mx, my, by = 'ID')
full_join(mx, my, by = 'ID')
gdp <- import('gdp.xls')
library(rio) # импорт фантастического количества форматов данных
gdp <- import('gdp.xls')
glimpse(gdp)
gdp
gdp <- rename(gdp, indicator = X__1)
long_gdp <- gather(gdp, key = 'date', value = 'quantity', -indicator)
glimpse(long_gdp)
diamonds_med <- group_by(diamonds, cut, color) %>%
summarise(med_price = median(price))
diamonds_med
diamonds_wide <- spread(diamonds_med,
key = 'color', value = 'med_price')
diamonds_wide
air_long <- gather(airquality, key = 'indicator', value = 'value', -Month, -Day)
air_long
head(airquality, 5)
?airquality
air_wide <- spread(air_long, key = 'indicator', value = 'value')
air_wide
skim(typical_data)
vis_miss(typical_data)
vis_miss(typical_data, cluster = TRUE)
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(nycflights13) # baby - большие данные
skim(typical_data)
vis_miss(typical_data)
vis_miss(typical_data, cluster = TRUE)
skim(my_matrix) # не работает :(
my_tibble <- as_tibble(my_matrix)
skim(my_tibble)
my_list <- list(kreks = 'Привет!', peks = c(5, 6, NA), feks = diamonds)
my_list$kreks
attributes(my_list)
View(my_list)
View(my_list)
my_list$peks
typical_replaced <- replace_na(data = typical_data,
replace = list(IQ =  min(typical_data$IQ, na.rm = TRUE),
Income = median(typical_data$Income, na.rm = TRUE),
ID = -1,
Age = mean(typical_data$Age, na.rm = TRUE)))
skim(typical_replaced)
protein_stand <- mutate_if(protein, is.numeric, ~ as.vector(scale(.)))
skim(protein_stand)
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(nycflights13) # baby - большие данные
protein_stand <- mutate_if(protein, is.numeric, ~ as.vector(scale(.)))
protein <- import('Europenaprotein.csv')
skim(protein)
protein_stand <- mutate_if(protein, is.numeric, ~ as.vector(scale(.)))
skim(protein_stand)
skim(protein_stand)
glimpse(protein_stand)
glimpse(protein_no_country)
protein_no_country <- protein_stand %>% column_to_rownames(var = 'Country')
glimpse(protein_no_country)
View(protein_no_country)
4428^2
6071^2
8570^2
runif(10, min=4, max=5)
set.seed(4428)
runif(10)
?kmeans
set.seed(4428)
k_means_protein <- kmeans(protein_no_country, centers = 3)
k_means_protein
fviz_cluster(object = k_means_protein, data = protein_no_country,
ellipse.type = 'convex')
set.seed(4428)
k_means_protein <- kmeans(protein_no_country, centers = 3)
k_means_protein
fviz_cluster(object = k_means_protein, data = protein_no_country,
ellipse.type = 'convex')
g1 <- fviz_nbclust(protein_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
g2 <- fviz_nbclust(protein_no_country, kmeans, method = 'silhouette') +
labs(subtitle = 'Silhouette method')
g2
g3 <- fviz_nbclust(protein_no_country, kmeans, method = 'gap_stat') +
labs(subtitle = 'Gap statistic method')
g3
?fviz_cluster
(g1 + g2) / g3
g1 + g2 + g3
g1 + (g2 / g3)
protein_plus <- mutate(protein,
cluster = k_means_protein$cluster)
glimpse(protein_plus)
View(protein_plus)
View(protein_plus)
View(protein_plus)
View(protein_plus)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages(c("Ecdat", "sjstats", "sandwich", "AER"))
pulse <- import('data/pulse.txt')
setwd("D:/R_teaching/r_course")
pulse <- import('data/pulse.txt')
skim(pulse)
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
pulse_fct <- pulse %>%
mutate_at(vars(Alcohol), factor)
mutate_at(starts_with(vars(Age,'strange var'), factor)
mutate_at(starts_with(vars('Age','height'), factor)
mutate_at(starts_with(vars('Age','Height'), factor)
mutate_at(starts_with(vars('Pulse'), factor)
mutate_at(starts_with(vars('Pulse'), factor)
pulse_fct <- pulse %>%
mutate_at(vars('Pulse'), factor)
model_r <- lm(data = pulse_fct, Pulse2 ~ Pulse1)
summary(model_r)
summary(model_r)
```
- На сколько в среднем отличается пульс после упражнений у двух студентов, если
пульс до упражнений у них отличается на единицу?
- Какие коэффициенты значимы?
- Какая доля разброса пульса после упражнений объясняется пульсом до упражнений?
* Упражнение 1.
Упражнения будем выполнять на встроенном наборе данных `Housing`.
Посмотрите описание переменных в справке :)
Затем «бросьте взгляд» на данные, есть ли в них факторные переменные, которые объявлены иначе?
```{r}
house <- Housing
# ___
view(pulse_fct)
tidy(model_r)
glance(model_r)
coeftest(model_r)
ggplot(data = pulse_fct, aes(x = Pulse1, y = Pulse2))
ggplot(data = pulse_fct, aes(x = Pulse1, y = Pulse2)) +
geom_point()
ggplot(data = pulse_fct, aes(x = Pulse1, y = Pulse2)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(data = pulse_fct, aes(x = Pulse1, y = Pulse2)) +
geom_point() +
geom_smooth(method = 'loess')
ggplot(data = pulse_fct, aes(x = Pulse1, y = Pulse2)) +
geom_point() +
geom_smooth(method = 'lm')
?geom_smooth
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur)
ggnostic(model = model_ur)
library(GGally) # больше готовых графиков
install.packages("GGally")
ggnostic(model = model_ur)
library(GGally) # больше готовых графиков
install.packages("GGally")
library(GGally) # больше готовых графиков
ggnostic(model = model_ur)
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
ggnostic(model = model_ur)
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur)
ggnostic(model = model_ur)
coefci(model_ur)
coefci(model_ur, level=0.8)
plot_model(model_ur, ci.lvl = 0.9)
plot_model(model_ur, type="std", ci.lvl = 0.9)
vif(model_ur)
library(sjPlot) # ещё больше графиков
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
install.packages("sjPlot")
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur)
coefci(model_ur, level=0.8)
plot_model(model_ur, type="std", ci.lvl = 0.9)
library(sjstats) # удобные мелкие функции для работы с моделями
plot_model(model_ur, type="std", ci.lvl = 0.9)
sessionInfo()
install.packages(c("data.table", "fst", "highr", "MASS", "munsell", "mvtnorm", "naniar", "openxlsx", "purrr", "purrrlyr", "rlang", "rmarkdown", "skimr", "sp", "stringi", "survival", "zoo"))
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
