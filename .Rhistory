library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages(c("stringi", "openxlsx"))
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("mvtnorm")
g1 <- fviz_nbclust(protein_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
g2 <- fviz_nbclust(protein_no_country, kmeans, method = 'silhouette') +
labs(subtitle = 'Silhouette method')
g2
g3 <- fviz_nbclust(protein_no_country, kmeans, method = 'gap_stat') +
labs(subtitle = 'Gap statistic method')
g3
(g1 + g2) / g3
g1 + g2 + g3
g1 + (g2 / g3)
# p1 <- fviz_nbclust(___, kmeans, method = 'wss') +
#  labs(subtitle = 'Elbow method')
# p2 <- fviz_nbclust(___, ___, method = 'silhouette') +
#  labs(subtitle = 'Silhouette method')
# p3 <- fviz_nbclust(___, ___, method = 'gap_stat') +
#  labs(subtitle = 'Gap statistic method')
# (___ + ___) / ___
# p1 <- fviz_nbclust(___, kmeans, method = 'wss') +
#  labs(subtitle = 'Elbow method')
# p2 <- fviz_nbclust(___, ___, method = 'silhouette') +
#  labs(subtitle = 'Silhouette method')
# p3 <- fviz_nbclust(___, ___, method = 'gap_stat') +
#  labs(subtitle = 'Gap statistic method')
# (___ + ___) / ___
g1 <- fviz_nbclust(protein_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
devtools::install_github('thomasp85/patchwork')
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(nycflights13) # baby - большие данные
b <- 11:15
data <- import('Data_R.xlsx')
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
install.packages("feather")
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(tidyverse) # обработка данных, графики...
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(lattice) #для графиков
library(DataExplorer) #для быстрого автоматического графического анализа
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(cluster) # кластерный анализ
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(GGally) # больше готовых графиков
devtools::install_github("strengejacke/strengejacke")
library(lmtest) # диагностика линейных моделей
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(huxtable) # красивые таблички в html, tex
library(stargazer) # красивые таблички в html, tex
library(texreg) # и снова красивые таблички в html, tex :)
library(estimatr) # модели с робастными ошибками
library(sandwich) # оценка Var для гетероскедастичности
library(caret) # пакет для подбора параметров разных моделей
library(FFTrees) # быстрые деревья
library(margins) # для подсчёта предельных эффектов
library(rpart.plot) # для картинок деревьев
library(plotROC) # визуализация ROC-кривой
library(ggeffects) # графики для предельных эффектов
library(MLmetrics) # метрики качества
library(ranger) # случайный лес
library(factoextra) # графики для кластеризации и pca
library(elasticnet) # LASSO
library(latex2exp) # формулы в подписях к графику
library(distances) # расчет различных расстояний
library(latex2exp) # формулы в подписях к графику
library(rusmaps) # подборка карт России
library(geojsonio) # чтение карт в формате geojson
library(leaflet) # рисование динамических карт в html
library(maptools) # утилиты для работы с картами
library(rgeos) # пересчёт картографических проекций
library(plm) # анализ панельных данных
library(texreg) # таблички со сравнением моделей
data <- import('Data_R.xlsx')
setwd("D:/R_teaching/r_course")
data <- import('Data_R.xlsx')
data <- import('Data_R.xlsx')
skim (data)
data <- import('Data_R.xlsx')
skim (data)
data <- import('Data_R.xlsx')
skim (data)
data <- import('Data_R.xlsx')
data <- import('Data_R.xlsx')
skim(data)
data$Local_currency <-Local_currency.asnumeric
data <- import('Data_R.xlsx')
skim(data)
data <- mutate(data, life_is_more = factor(life_is_more), Y_net_trade = factor(Y_net_trade), local_currency = numeric(local_currency))
data <- mutate(data, Continents=factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade), Local_currency = numeric(Local_currency))
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)```
skim(data)
data <- import('Data_R.xlsx')
skim(data)
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)
?replace_na()
library(dplyr)
replace (Commercial_bank = median(data$Commercial_bank, na.rm = TRUE)
replace(Commercial_bank = median(data$Commercial_bank, na.rm = TRUE)
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)
data <- import('Data_R_description.xlsx')
skim(data)
data <- import('Data_R.xlsx')
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
data_description <- import('Data_R_description.xlsx')
skim(data)
data_description <- import('Data_R_description.xlsx')
knitr::kable(data_description)
data <- import('Data_R.xlsx')
skim(data)
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)
glimpse(data)
head(data)
tail(data)
data_stand <- mutate_if(data, is.numeric, ~ as.vector(scale(.)))
skim(data_stand)
str(data)
create_report(data)
data <- mutate(data, lnY = log(Insurance_dencity))
skim(data)
skim(data)
qplot(data = data, x = lnY) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins=30) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins=20) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins=15) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins = 12) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins = 10) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins = 8) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins = 7) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins = 8) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
?chisq.test
chisq.test(x=lnY, p=p)
data <- mutate(data, lnY = log(Insurance_dencity))
qplot(data = data, x = lnY, bins = 8) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
chisq.test(x=lnY, p=p)
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
plot(function(lnY) dnorm(lnY, log = TRUE), mean(lnY), sd(lnY),
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)```
curve(log(dnorm(lnY)), add = TRUE, col = "red", lwd = 2)```
curve(log(dnorm(lnY)), add = TRUE, col = "red", lwd = 2)
x <- lnY
x <- data$lnY
plot(function(x) dnorm(x, log = TRUE), mean(x), sd(x),
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
plot(function(x) dnorm(x, log = FALSE), mean(x), sd(x),
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
plot(function(x) dnorm(x, log = FALSE), mean(x), sd(x),
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
data <- mutate(data, lnY = log(Insurance_dencity))
skim(data)
qplot(data = data, x = lnY, bins = 8) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
data_stand <- mutate_if(data, is.numeric, ~ as.vector(scale(.)))
skim(data_stand)
data_no_country <- data_stand %>% column_to_rownames(var = 'Country')
k_means_data <- kmeans(data_no_country, centers = 3)
k_means_data
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse) # обработка данных, графики...
library(dplyr)
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(lattice) #для графиков
library(DataExplorer) #для быстрого автоматического графического анализа
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
devtools::install_github("strengejacke/strengejacke")
library(lmtest) # диагностика линейных моделей
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(huxtable) # красивые таблички в html, tex
library(stargazer) # красивые таблички в html, tex
library(texreg) # и снова красивые таблички в html, tex :)
library(estimatr) # модели с робастными ошибками
library(sandwich) # оценка Var для гетероскедастичности
library(caret) # пакет для подбора параметров разных моделей
library(FFTrees) # быстрые деревья
library(margins) # для подсчёта предельных эффектов
library(rpart.plot) # для картинок деревьев
library(plotROC) # визуализация ROC-кривой
library(ggeffects) # графики для предельных эффектов
library(MLmetrics) # метрики качества
library(ranger) # случайный лес
library(factoextra) # графики для кластеризации и pca
library(elasticnet) # LASSO
library(latex2exp) # формулы в подписях к графику
library(distances) # расчет различных расстояний
library(rusmaps) # подборка карт России
library(geojsonio) # чтение карт в формате geojson
library(leaflet) # рисование динамических карт в html
library(maptools) # утилиты для работы с картами
library(rgeos) # пересчёт картографических проекций
library(texreg) # таблички со сравнением моделей
data <- import('Data_R.xlsx')
skim(data)
data_description <- import('Data_R_description.xlsx')
knitr::kable(data_description)
glimpse(data)
head(data)
tail(data)
str(data)
data_stand <- mutate_if(data, is.numeric, ~ as.vector(scale(.)))
skim(data_stand)
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)
glimpse(data)
data <- mutate(data, lnY = log(Insurance_dencity))
skim(data)
qplot(data = data, x = lnY, bins = 8) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
qplot(data = data, x = lnY, bins = 8) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
data_stand <- mutate_if(data, is.numeric, ~ as.vector(scale(.)))
skim(data_stand)
data_no_country <- data_stand %>% column_to_rownames(var = 'Country')
k_means_data <- kmeans(data_no_country, centers = 3)
skim(data_no_country)
k_means_data <- kmeans(data_no_country, centers = 3)
protein <- import('Europenaprotein.csv')
protein <- import('data/Europenaprotein.csv')
skim(protein)
data_stand <- mutate_if(data - is.factor(), is.numeric, ~ as.vector(scale(.)))
splom(data[c(4, 5, 6, 7, 8)])
splom(data[c(4, 6, 8,13)])
splom(data[c(4,8, 10, 11, 12, 13,14)])
splom(data[c(4, 10, 12, 13)])
table(data$Continents, data$Life_is_more)
table(data$Continents, data$Y_net_trade)
table(data$Y_net_trade, data$Life_is_more)
table(data$Continents, data$Life_is_more)
chisq.test(ctable)
table1 <- table(data$Continents, data$Life_is_more)
chisq.test(table1)
table2 <-table(data$Continents, data$Y_net_trade)
chisq.test(table2)
table1
chisq.test(table1)
table2
chisq.test(table2)
table3
chisq.test(table3)
table1 # таблица сопряженности континентов и преоддлажания страхования жизни
table1 <- table(data$Continents, data$Life_is_more)
table1 # таблица сопряженности континентов и преобладания страхования жизни
chisq.test(table1)
table2 <- table(data$Continents, data$Y_net_trade)
table2 # таблица сопряженности континентов и преобладания продажи товаров и услуг
chisq.test(table2)
table3 <- table(data$Y_net_trade, data$Life_is_more)
table3 # таблица сопряженности преобладания продажи товаров и услуг и преобладания страхования жизни
chisq.test(table3)
table(data$Continents, data$Life_is_more, data$Y_net_trade)
table(data$Continents, data$Life_is_more, data$Y_net_trade)
table(data$Continents)
table(data$Life_is_more)
table(data$Y_net_trade)
mosaic(data = data, ~ Continents + Life_is_more + Y_net_trade, shade = TRUE, legend = TRUE)
library(vcd)
mosaic(data = data, ~ Continents + Life_is_more + Y_net_trade, shade = TRUE, legend = TRUE)
mosaic(data = data, ~ Continents + Life_is_more, shade = TRUE, legend = TRUE)
mosaic(data = data, ~ Continents + Y_net_trade, shade = TRUE, legend = TRUE)
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  facet_grid(Life_is_more ~ .) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам')
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам')
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  facet_grid(Life_is_more ~ .) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам в зависимости от наличия преобладания страхования жизни (да - верхний график)')
data <- import('Data_R.xlsx')
=
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)
data <- import('Data_R.xlsx')
skim(data)
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)
data_description <- import('Data_R_description.xlsx')
knitr::kable(data_description)
library(tidyverse) # обработка данных, графики...
library(dplyr)
library(skimr)# описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(lattice) #для графиков
library(DataExplorer) #для быстрого автоматического графического анализа
library(cluster) # кластерный анализ
library(factoextra) # визуализации kmeans, pca,
library(dendextend) # визуализация дендрограмм
library(corrplot) # визуализация корреляций
library(broom) # метла превращает результаты оценивания моделей в таблички
library(naniar) # визуализация пропущенных значений
library(visdat) # визуализация пропущенных значений
library(patchwork) # удобное расположение графиков рядом
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
devtools::install_github("strengejacke/strengejacke")
library(lmtest) # диагностика линейных моделей
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(huxtable) # красивые таблички в html, tex
library(stargazer) # красивые таблички в html, tex
library(texreg) # и снова красивые таблички в html, tex :)
library(estimatr) # модели с робастными ошибками
library(sandwich) # оценка Var для гетероскедастичности
library(caret) # пакет для подбора параметров разных моделей
library(FFTrees) # быстрые деревья
library(margins) # для подсчёта предельных эффектов
library(rpart.plot) # для картинок деревьев
library(plotROC) # визуализация ROC-кривой
library(ggeffects) # графики для предельных эффектов
library(MLmetrics) # метрики качества
library(ranger) # случайный лес
library(factoextra) # графики для кластеризации и pca
library(elasticnet) # LASSO
library(latex2exp) # формулы в подписях к графику
library(distances) # расчет различных расстояний
library(texreg) # таблички со сравнением моделей
library(vcd)
data <- import('Data_R.xlsx')
skim(data)
data <- import('Data_R.xlsx')
skim(data)
data <- mutate(data, Continents = factor(Continents), Life_is_more = factor(Life_is_more), Y_net_trade = factor(Y_net_trade))
skim(data)
data_description <- import('Data_R_description.xlsx')
knitr::kable(data_description)
glimpse(data)
head(data) # Показывает "шапку"" таблицы данных - первые 6 строк таблицы
str(data) #
create_report(data) # создаем целый краткий отчет по данным - все дискриптивные статистики, гистограммы, корреляционная матрица, главные компоненты...
data <- mutate(data, lnY = log(Insurance_dencity))
skim(data)
qplot(data = data, x = lnY, bins = 8) + labs(x = 'Логарифм плотности страхования (в $))', title = 'Гистограмма логарифма плотности страхования')
table(data$Continents)
table(data$Life_is_more)
table(data$Y_net_trade)
table1 <- table(data$Continents, data$Life_is_more)
table1 # таблица сопряженности континентов и преобладания страхования жизни
chisq.test(table1)
table2 <- table(data$Continents, data$Y_net_trade)
table2 # таблица сопряженности континентов и преобладания продажи товаров и услуг
chisq.test(table2)
table3 <- table(data$Y_net_trade, data$Life_is_more)
table3 # таблица сопряженности преобладания продажи товаров и услуг и преобладания страхования жизни
chisq.test(table3)
mosaic(data = data, ~ Continents + Life_is_more, shade = TRUE, legend = TRUE)
mosaic(data = data, ~ Continents + Y_net_trade, shade = TRUE, legend = TRUE)
data <- mutate(data, lnY = log(Insurance_dencity))
skim(data)
splom(data[c(4, 10, 12, 13)])
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам')
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  facet_grid(Life_is_more ~ .) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам в зависимости от наличия преобладания страхования жизни (да - нижний график)')
ggplot(data = data) +   geom_point(aes(x = GDP_per_capita, y = Insurance_dencity, color = color, shape=bin)) +   geom_vline(aes(yintercept = mean(Insurance_dencity))) +   labs(x='Плотность страхования ($)', y='ВВП на душу населения ($)', title = Зависимость плотности страхования от ВВП страны на душу населения', subtitle= 'Прямая - средняя плотность страхования по странам', caption='The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y =Insurance_dencity, color = color, shape=bin)) +   geom_vline(aes(yintercept = mean(Insurance_dencity))) +   labs(x='Плотность страхования ($)', y='ВВП на душу населения ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle= 'Прямая - средняя плотность страхования по странам', caption='The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y =Insurance_dencity,  shape=bin)) +   geom_vline(aes(yintercept = mean(Insurance_dencity))) +   labs(x='Плотность страхования ($)', y='ВВП на душу населения ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle= 'Прямая - средняя плотность страхования по странам', caption='The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y =Insurance_dencity) +   geom_vline(aes(yintercept = mean(Insurance_dencity))) +   labs(x='Плотность страхования ($)', y='ВВП на душу населения ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle= 'Прямая - средняя плотность страхования по странам', caption='The World Bank')
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  facet_grid(Life_is_more ~ .) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам в зависимости от наличия преобладания страхования жизни (да - нижний график)')
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам')
ggplot(data = data) +   geom_violin(aes(x = Continents, y = Insurance_dencity)) +  facet_grid(Life_is_more ~ .) +  labs(x = 'Континенты', y = 'Плотность страхования', title = 'Распределение плотности страхования по континентам в зависимости от наличия преобладания страхования жизни (да - нижний график)')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = Insurance_dencity) +   geom_vline(aes(yintercept = mean(Insurance_dencity))) +   labs(x='Плотность страхования ($)', y='ВВП на душу населения ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle='Прямая - средняя плотность страхования по странам', caption='The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = Insurance_dencity) +   geom_vline(aes(yintercept = mean(Insurance_dencity))) +   labs(x ='Плотность страхования ($)', y ='ВВП на душу населения ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle = 'Прямая - средняя плотность страхования по странам', caption ='The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = lnY) +   geom_hline(aes(yintercept = mean(lnY))) +   labs(x ='Плотность страхования ($)', y ='ВВП на душу населения ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle = 'Прямая - средняя плотность страхования по странам', caption ='The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = lnY) +  geom_hline(aes(yintercept = mean(lnY))) +                                     labs(x = 'ВВП на душу населения ($)', y = 'Плотность страхования ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle = 'Прямая - средняя плотность страхования по странам', caption = 'The World Bank')
library(ggplot2)
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = lnY)) +  geom_hline(aes(yintercept = mean(lnY))) +                                     labs(x = 'ВВП на душу населения ($)', y = 'Плотность страхования ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle = 'Прямая - средняя плотность страхования по странам', caption = 'The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = lnY, color = color, shape=bin))) +  geom_hline(aes(yintercept = mean(lnY))) +                                     labs(x = 'ВВП на душу населения ($)', y = 'Плотность страхования ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle = 'Прямая - средняя плотность страхования по странам', caption = 'The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = lnY)) +  geom_hline(aes(yintercept = mean(lnY))) +                                     labs(x = 'ВВП на душу населения ($)', y = 'Плотность страхования ($)', title = 'Зависимость плотности страхования от ВВП страны на душу населения', subtitle = 'Прямая - средняя плотность страхования по странам', caption = 'The World Bank')
ggplot(data = data) + geom_point(aes(x = GDP_per_capita, y = lnY)) +  geom_hline(aes(yintercept = mean(lnY))) +                                     labs(x = 'ВВП на душу населения ($)', y = 'Логарифм плотности страхования ($)', title = 'Зависимость логарифма плотности страхования от ВВП страны на душу населения', subtitle = 'Прямая - средняя логарифма плотности страхования по странам ', caption = 'Source: The World Bank')
data_num <- select(data, Insurance_dencity:Life_nonlife, Net_trade)
skim(data_num)
data_num <- select(data, Insurance_dencity:Life_nonlife, Net_trade, Life, Non-life, Net_trade_per_capita)
data_num <- select(data, Insurance_dencity:Life_nonlife, Net_trade, Life, Non-life, Net_trade_per_capita)
data_num <- select(data, Insurance_dencity:Life_nonlife, Life, Net_trade_per_capita)
skim(data_num)
cor(data_num, use = 'pairwise.complete.obs')
corrplot.mixed(data_cor)
data_cor <- cor(data_num, use = 'pairwise.complete.obs')
corrplot.mixed(data_cor)
data_stand <- mutate_if(data_num, is.numeric, ~ as.vector(scale(.)))
skim(data_stand)
data_no_country <- data_stand %>% column_to_rownames(var = 'Country')
data_stand <- mutate(data_stand, data$Country)
skim(data_stand)
data_no_country <- data_stand %>% column_to_rownames(var = 'Country')
data_no_country <- data_stand %>% column_to_rownames(var = 'Country')
corrplot(data_cor, method = 'color', type = 'upper')
corrplot(cars_cor, method = 'pie', type = 'lower')
corrplot(data_cor, method = 'pie', type = 'lower')
corrplot.mixed(data_cor)
data_stand <- mutate_if(data_num, is.numeric, ~ as.vector(scale(.)))
data_stand <- mutate(data_stand, data$Country)
skim(data_stand)
data_stand <- mutate_if(data_num, is.numeric, ~ as.vector(scale(.)))
data_stand <- mutate(data_stand, data$Country)
skim(data_stand)
g1 <- fviz_nbclust(data_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
data_stand <- mutate_if(data_num, is.numeric, ~ as.vector(scale(.)))
skim(data_stand)
g1 <- fviz_nbclust(data_no_country, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1 <- fviz_nbclust(data_stand, kmeans, method = 'wss') +
labs(subtitle = 'Elbow method')
g1
g2 <- fviz_nbclust(data_stand, kmeans, method = 'silhouette') +
labs(subtitle = 'Silhouette method')
g2
g3 <- fviz_nbclust(data_stand, kmeans, method = 'gap_stat') +
labs(subtitle = 'Gap statistic method')
g3
(g1 + g2) / g3
g1 + g2 + g3
g1 + (g2 / g3)
g1 + (g2 / g3)
data_plus <- mutate(data, cluster = k_means_data$cluster)
data_dist <- dist(data_stand, method = 'euclidian')
fviz_dist(data_dist)
datan_hcl <- hcut(data_stand, k = 5)
fviz_dend(data_hcl,
cex = 0.5, # размер подписи
color_labels_by_k = TRUE) # цвет подписей по группам
data_hcl <- hcut(data_stand, k = 5)
fviz_dend(data_hcl,
cex = 0.5, # размер подписи
color_labels_by_k = TRUE) # цвет подписей по группам
data_plus2 <- mutate(data, cluster = data_hcl$cluster)
glimpse(data_plus2)
data_cor <- cor(data_stand)
corrplot(data_cor, order = 'hclust', addrect = 3)
corrplot(data_cor, order = 'hclust', addrect = 2)
corrplot(data_cor, order = 'hclust', addrect = 5)
data_no_country <- data_stand %>% column_to_rownames(var = 'Country')
set.seed(13)
k_means_data <- kmeans(data_no_country, centers = 3)
k_means_data <- kmeans(data_stand, centers = 2)
k_means_data
attributes(k_means_data)
k_means_data$centers
k_means_data$cluster
k_means_data$size
tidy(k_means_data)
fviz_cluster(object = k_means_data, data = data_stand,
ellipse.type = 'convex')
data_plus <- mutate(data, cluster = k_means_data$cluster)
glimpse(data_plus)
hc_metric = 'euclidean', hc_method = 'ward.D2')
install.packages("haven")
install.packages("glmnTMB")
